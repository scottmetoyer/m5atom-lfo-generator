#include "M5Atom.h"
#include <MIDI.h>

extern const unsigned char AtomImageData[375 + 2];

// 0 = Sine
// 1 = Saw
// 2 = Square
// 3 = Random
int currentWaveform = 0;
int waveformIndex = 0;
float accX = 0, accY = 0, accZ = 0;
bool IMU6886Flag = false;

struct HairlessMidiSettings : public midi::DefaultSettings
{
   static const bool UseRunningStatus = false;
   static const long BaudRate = 115200;
};
MIDI_CREATE_CUSTOM_INSTANCE(HardwareSerial, Serial, MIDI, HairlessMidiSettings);

const unsigned char image_saw[77]=
{
/* width  005 */ 0x05,
/* height 005 */ 0x05,
/* Line   000 */ 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0xaa,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, // 
/* Line   001 */ 0x00,0x00,0x00, 0x00,0xaa,0x00, 0x00,0x00,0x00, 0x00,0xaa,0x00, 0x00,0x00,0x00, // 
/* Line   002 */ 0x00,0x00,0x00, 0x00,0xaa,0x00, 0x00,0x00,0x00, 0x00,0xaa,0x00, 0x00,0x00,0x00, // 
/* Line   003 */ 0x00,0xaa,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0xaa,0x00, // 
/* Line   004 */ 0x00,0xaa,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0xaa,0x00, // 
};
const unsigned char image_sine[77]=
{
/* width  005 */ 0x05,
/* height 005 */ 0x05,
/* Line   000 */ 0x00,0x00,0x00, 0xff,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0xff,0x00,0x00, // 
/* Line   001 */ 0xff,0x00,0x00, 0x00,0x00,0x00, 0xff,0x00,0x00, 0x00,0x00,0x00, 0xff,0x00,0x00, // 
/* Line   002 */ 0xff,0x00,0x00, 0x00,0x00,0x00, 0xff,0x00,0x00, 0x00,0x00,0x00, 0xff,0x00,0x00, // 
/* Line   003 */ 0xff,0x00,0x00, 0x00,0x00,0x00, 0xff,0x00,0x00, 0x00,0x00,0x00, 0xff,0x00,0x00, // 
/* Line   004 */ 0xff,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0xff,0x00,0x00, 0x00,0x00,0x00, // 
};
const unsigned char image_random[77]=
{
/* width  005 */ 0x05,
/* height 005 */ 0x05,
/* Line   000 */ 0x00,0x00,0x00, 0xff,0xff,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, // 
/* Line   001 */ 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0xff,0xff,0x00, // 
/* Line   002 */ 0x00,0x00,0x00, 0x00,0x00,0x00, 0xff,0xff,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, // 
/* Line   003 */ 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0xff,0xff,0x00, 0x00,0x00,0x00, // 
/* Line   004 */ 0xff,0xff,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, // 
};
const unsigned char image_square[77]=
{
/* width  005 */ 0x05,
/* height 005 */ 0x05,
/* Line   000 */ 0x00,0xaa,0xff, 0x00,0xaa,0xff, 0x00,0xaa,0xff, 0x00,0x00,0x00, 0x00,0x00,0x00, // 
/* Line   001 */ 0x00,0xaa,0xff, 0x00,0x00,0x00, 0x00,0xaa,0xff, 0x00,0x00,0x00, 0x00,0x00,0x00, // 
/* Line   002 */ 0x00,0xaa,0xff, 0x00,0x00,0x00, 0x00,0xaa,0xff, 0x00,0x00,0x00, 0x00,0x00,0x00, // 
/* Line   003 */ 0x00,0xaa,0xff, 0x00,0x00,0x00, 0x00,0xaa,0xff, 0x00,0x00,0x00, 0x00,0x00,0x00, // 
/* Line   004 */ 0x00,0xaa,0xff, 0x00,0x00,0x00, 0x00,0xaa,0xff, 0x00,0xaa,0xff, 0x00,0xaa,0xff, // 
};

const unsigned char waves[][128] = {
  {
    64,67,70,73,76,79,82,85,88,91,94,96,99,102,104,106,
    109,111,113,115,117,118,120,121,122,123,124,125,126,126,127,127,
    127,127,127,126,126,125,124,123,122,120,119,117,116,114,112,110,
    108,105,103,100,98,95,92,89,87,84,81,78,74,71,68,65,
    62,59,56,53,49,46,43,40,38,35,32,29,27,24,22,19,
    17,15,13,11,10,8,7,5,4,3,2,1,1,0,0,0,
    0,0,1,1,2,3,4,5,6,7,9,10,12,14,16,18,
    21,23,25,28,31,33,36,39,42,45,48,51,54,57,60,64
  },
  {
    2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,
    34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,
    66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,
    98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,127,
    126,124,122,120,118,116,114,112,110,108,106,104,102,100,98,96,
    94,92,90,88,86,84,82,80,78,76,74,72,70,68,66,64,
    62,60,58,56,54,52,50,48,46,44,42,40,38,36,34,32,
    30,28,26,24,22,20,18,16,14,12,10,8,6,4,2,0
  },
  { 
    127,127,127,127,127,127,127,127,127,127,127,127,
    127,127,127,127,127,127,127,127,127,127,127,127,
    127,127,127,127,127,127,127,127,127,127,127,127,
    127,127,127,127,127,127,127,127,127,127,127,127,
    127,127,127,127,127,127,127,127,127,127,127,127,
    127,127,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  },
  {
    28,96,63,10,90,80,12,11,61,120,101,111,79,14,24,
    86,70,36,25,34,99,59,30,73,126,0,16,52,43,104,27,
    8,20,22,115,32,1,94,44,26,50,33,108,107,127,106,
    55,118,91,15,56,68,121,97,69,71,6,13,117,102,54,
    40,17,57,38,31,48,66,77,82,21,76,113,65,74,3,9,
    125,83,23,116,41,49,62,51,85,103,37,72,29,114,105,
    58,46,100,47,89,18,2,42,64,109,98,4,110,93,7,
    39,75,95,122,78,53,35,88,92,112,124,60,81,87,67,119, 
    19,45,84
  }
};

void setup()
{
    M5.begin(true, false, true);
    if (M5.IMU.Init() != 0)
        IMU6886Flag = false;
    else
        IMU6886Flag = true;
    delay(10);
    M5.dis.displaybuff((uint8_t *)image_sine);

    MIDI.begin(); 
    Serial.begin(38400);  
}

void loop()
{
    if (M5.Btn.wasPressed())
    {
        currentWaveform++;
        if (currentWaveform == 4)
        {
            currentWaveform = 0;
        }
        
        switch (currentWaveform)
        {
          case 0:
              M5.dis.displaybuff((uint8_t *)image_sine);
              break;
          case 1:
              M5.dis.displaybuff((uint8_t *)image_saw);
              break;
          case 2:
              M5.dis.displaybuff((uint8_t *)image_square);
              break;
          case 3:
              M5.dis.displaybuff((uint8_t *)image_random);
              break;
          default:
              break;
        }
    }
        
    MIDI.sendControlChange(1, waves[currentWaveform][waveformIndex], 1);

    waveformIndex ++;
    if (waveformIndex == 128) {
      waveformIndex = 0;
    }

    // Check accelerometer data
    M5.IMU.getAccelData(&accX, &accY, &accZ);
    int acc = constrain(map(accX * 100, -100, 100, 0, 100), 0, 100);
    
    delay(acc);
    M5.update();
}
